package org.cytoscape.centiscape.internal;

/*
 * CentiScaPeStartMenu.java
 *
 * Created on 13 novembre 2007, 13.37
 */
/**
 *
 * @author scardoni
 */
import java.awt.Component;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.centiscape.internal.visualizer.Centrality;
import org.cytoscape.centiscape.internal.visualizer.ImplCentrality;
import org.cytoscape.model.CyColumn;
import org.cytoscape.model.CyEdge;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.model.CyNode;
import org.cytoscape.model.CyTable;
import org.cytoscape.view.model.CyNetworkView;

public class CentiScaPeStartMenu extends javax.swing.JPanel implements CytoPanelComponent {

    private int numberofcentralities = 12;
    private boolean calculating = false;
    private CyNetwork lastworkednetwork;
    private CyNetworkView lastworkedview;
    private CentiScaPeCore centiscapecore;
    CyApplicationManager cyApplicationManager;
    CySwingApplication cyDesktopService;
    CyNetwork currentnetwork;
    CyNetworkView currentnetworkview;
    public CyActivator cyactivator;
    private double inizio;
    private double fine;
    private boolean[] CheckedCentralities = new boolean[numberofcentralities];
    public String[] directedCentralities;
    private CentiScaPeAlgorithm CentiScaPealg;
    private CentiScaPeThreadEngine ThrEng;
    public Vector<Centrality> VectorResults = new Vector();
    private boolean[] LoadedCentralities = new boolean[numberofcentralities];
    CentiScaPeDirectedThreadEngine Thrd;
    public Boolean isWeighted;
    static String edgeWeightAttribute;
    static Class<?> attrtype;

    public CentiScaPeStartMenu(CyActivator cyactivator, CentiScaPeCore centiscapecore) {
        initComponents();
        startclient.setVisible(false);
        this.cyactivator = cyactivator;
        this.centiscapecore = centiscapecore;
        lastworkednetwork = null;
        lastworkedview = null;
        cyApplicationManager = centiscapecore.getCyApplicationManager();
        cyDesktopService = centiscapecore.getCyDesktopService();
        CentiScaPealg = new CentiScaPeAlgorithm(centiscapecore);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        DiameterCheckBox = new javax.swing.JCheckBox();
        AverageDistanceCheckBox = new javax.swing.JCheckBox();
        DegreeCheckBox = new javax.swing.JCheckBox();
        EccentricityCheckBox = new javax.swing.JCheckBox();
        RadialityCheckBox = new javax.swing.JCheckBox();
        ClosenessCheckBox = new javax.swing.JCheckBox();
        StressCheckBox = new javax.swing.JCheckBox();
        BetweennessCheckBox = new javax.swing.JCheckBox();
        CentroidCheckBox = new javax.swing.JCheckBox();
        selectallButton = new javax.swing.JButton();
        unselectallButton = new javax.swing.JButton();
        ClosenessHelpButton = new javax.swing.JButton();
        AverageHelpButton = new javax.swing.JButton();
        EccentricityHelpButton = new javax.swing.JButton();
        DiameterHelpButton = new javax.swing.JButton();
        DegreeHelpButton = new javax.swing.JButton();
        RadialityHelpButton = new javax.swing.JButton();
        StressHelpButton = new javax.swing.JButton();
        BetweennessHelpButton = new javax.swing.JButton();
        CentroidValueHelpButton = new javax.swing.JButton();
        EigenVectorCheckBox = new javax.swing.JCheckBox();
        EigenVectorHelpButton = new javax.swing.JButton();
        BridgingCheckBox = new javax.swing.JCheckBox();
        BirdgingHelpButton = new javax.swing.JButton();
        EdgeBetweennessCheckBox = new javax.swing.JCheckBox();
        EdgeBetweennessHelpButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jProgressBar1 = new javax.swing.JProgressBar();
        ExitButton = new javax.swing.JButton();
        undirectedRadioButton = new javax.swing.JRadioButton();
        directedRaidioButton = new javax.swing.JRadioButton();
        startclient = new javax.swing.JButton();
        jLabelServerResponse = new javax.swing.JLabel();
        WeightedCheckBox = new javax.swing.JCheckBox();
        UndirectedNetworkHelpButton = new javax.swing.JButton();
        DirectedNetworkHelpButton = new javax.swing.JButton();
        WeightedNetworkHelpButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        LoadAttributesButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(374, 1062));
        setRequestFocusEnabled(false);

        jScrollPane1.setToolTipText("");
        jScrollPane1.setPreferredSize(new java.awt.Dimension(374, 972));

        jPanel5.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel5.setPreferredSize(new java.awt.Dimension(374, 1062));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Implemented centralities"));
        jPanel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(336, 517));

        DiameterCheckBox.setText("Diameter");
        DiameterCheckBox.setToolTipText("");
        DiameterCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        DiameterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiameterCheckBoxActionPerformed(evt);
            }
        });

        AverageDistanceCheckBox.setText("Average Distance");
        AverageDistanceCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        AverageDistanceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AverageDistanceCheckBoxActionPerformed(evt);
            }
        });

        DegreeCheckBox.setText("Degree");
        DegreeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        DegreeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DegreeCheckBoxActionPerformed(evt);
            }
        });

        EccentricityCheckBox.setText("Eccentricity");
        EccentricityCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        EccentricityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EccentricityCheckBoxActionPerformed(evt);
            }
        });

        RadialityCheckBox.setText("Radiality");
        RadialityCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        RadialityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadialityCheckBoxActionPerformed(evt);
            }
        });

        ClosenessCheckBox.setText("Closeness");
        ClosenessCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ClosenessCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosenessCheckBoxActionPerformed(evt);
            }
        });

        StressCheckBox.setText("Stress");
        StressCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        StressCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StressCheckBoxActionPerformed(evt);
            }
        });

        BetweennessCheckBox.setText("Betweenness");
        BetweennessCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BetweennessCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BetweennessCheckBoxActionPerformed(evt);
            }
        });

        CentroidCheckBox.setText("Centroid Value");
        CentroidCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        CentroidCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CentroidCheckBoxActionPerformed(evt);
            }
        });

        selectallButton.setText("Select All");
        selectallButton.setMaximumSize(new java.awt.Dimension(117, 25));
        selectallButton.setMinimumSize(new java.awt.Dimension(117, 25));
        selectallButton.setPreferredSize(new java.awt.Dimension(117, 25));
        selectallButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectallButtonMouseClicked(evt);
            }
        });
        selectallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectallButtonActionPerformed(evt);
            }
        });

        unselectallButton.setText("Unselect All");
        unselectallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unselectallButtonActionPerformed(evt);
            }
        });

        ClosenessHelpButton.setText("?");
        ClosenessHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosenessHelpButtonActionPerformed(evt);
            }
        });

        AverageHelpButton.setText("?");
        AverageHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AverageHelpButtonActionPerformed(evt);
            }
        });

        EccentricityHelpButton.setText("?");
        EccentricityHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EccentricityHelpButtonActionPerformed(evt);
            }
        });

        DiameterHelpButton.setText("?");
        DiameterHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiameterHelpButtonActionPerformed(evt);
            }
        });

        DegreeHelpButton.setText("?");
        DegreeHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DegreeHelpButtonActionPerformed(evt);
            }
        });

        RadialityHelpButton.setText("?");
        RadialityHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadialityHelpButtonActionPerformed(evt);
            }
        });

        StressHelpButton.setText("?");
        StressHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StressHelpButtonActionPerformed(evt);
            }
        });

        BetweennessHelpButton.setText("?");
        BetweennessHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BetweennessHelpButtonActionPerformed(evt);
            }
        });

        CentroidValueHelpButton.setText("?");
        CentroidValueHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CentroidValueHelpButtonActionPerformed(evt);
            }
        });

        EigenVectorCheckBox.setText("EigenVector");
        EigenVectorCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        EigenVectorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EigenVectorCheckBoxActionPerformed(evt);
            }
        });

        EigenVectorHelpButton.setText("?");
        EigenVectorHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EigenVectorHelpButtonActionPerformed(evt);
            }
        });

        BridgingCheckBox.setText("Bridging");
        BridgingCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BridgingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BridgingCheckBoxActionPerformed(evt);
            }
        });

        BirdgingHelpButton.setText("?");
        BirdgingHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BirdgingHelpButtonActionPerformed(evt);
            }
        });

        EdgeBetweennessCheckBox.setText("Edge Betweenness");
        EdgeBetweennessCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        EdgeBetweennessCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeBetweennessCheckBoxActionPerformed(evt);
            }
        });

        EdgeBetweennessHelpButton.setText("?");
        EdgeBetweennessHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeBetweennessHelpButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(EigenVectorCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(200, 200, 200))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(CentroidCheckBox)
                                        .add(33, 33, 33))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(BetweennessCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(44, 44, 44))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(StressCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(79, 79, 79))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(ClosenessCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(57, 57, 57))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(RadialityCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(67, 67, 67))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(DegreeCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(74, 74, 74))
                                    .add(AverageDistanceCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .add(EccentricityCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(50, 50, 50))
                                    .add(EdgeBetweennessCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, EccentricityHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, CentroidValueHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, BetweennessHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, StressHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, ClosenessHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, RadialityHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, DegreeHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, EigenVectorHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, BirdgingHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, EdgeBetweennessHelpButton))
                                    .add(AverageHelpButton)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(DiameterCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(36, 36, 36)
                                .add(DiameterHelpButton)))
                        .add(31, 31, 31))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(BridgingCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(192, 192, 192))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(selectallButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(unselectallButton)
                        .add(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DiameterHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DiameterCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(AverageHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(AverageDistanceCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DegreeHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DegreeCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(RadialityHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(RadialityCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ClosenessHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ClosenessCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(StressHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(StressCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BetweennessHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(BetweennessCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CentroidValueHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(CentroidCheckBox))
                .add(22, 22, 22)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(EccentricityHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EccentricityCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(EigenVectorCheckBox)
                    .add(EigenVectorHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BridgingCheckBox)
                    .add(BirdgingHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(EdgeBetweennessHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EdgeBetweennessCheckBox))
                .add(23, 23, 23)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectallButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(unselectallButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(39, 39, 39))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(326, 285));

        StartButton.setText("Start");
        StartButton.setEnabled(false);
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StopButtonMouseClicked(evt);
            }
        });
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Click Start to calculate");

        jSeparator1.setForeground(java.awt.Color.gray);

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(undirectedRadioButton);
        undirectedRadioButton.setSelected(true);
        undirectedRadioButton.setText("for Undirected Networks");
        undirectedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undirectedRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(directedRaidioButton);
        directedRaidioButton.setText("for Directed Networks");
        directedRaidioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directedRaidioButtonActionPerformed(evt);
            }
        });

        startclient.setText("Click here to perform calculations on CBMC server");
        startclient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startclientActionPerformed(evt);
            }
        });

        WeightedCheckBox.setText(" Weighted Edges (as distance)");
        WeightedCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        WeightedCheckBox.setMaximumSize(new java.awt.Dimension(300, 15));
        WeightedCheckBox.setMinimumSize(new java.awt.Dimension(180, 15));
        WeightedCheckBox.setPreferredSize(new java.awt.Dimension(286, 15));
        WeightedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightedCheckBoxActionPerformed(evt);
            }
        });

        UndirectedNetworkHelpButton.setText("?");
        UndirectedNetworkHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndirectedNetworkHelpButtonActionPerformed(evt);
            }
        });

        DirectedNetworkHelpButton.setText("?");
        DirectedNetworkHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectedNetworkHelpButtonActionPerformed(evt);
            }
        });

        WeightedNetworkHelpButton.setText("?");
        WeightedNetworkHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightedNetworkHelpButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabelServerResponse, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(62, 62, 62))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jSeparator1))
                        .add(52, 52, 52))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(directedRaidioButton)
                                    .add(WeightedCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 260, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 36, Short.MAX_VALUE)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, DirectedNetworkHelpButton)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, WeightedNetworkHelpButton)))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(undirectedRadioButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(UndirectedNetworkHelpButton)))
                        .add(34, 34, 34))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(StartButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(StopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(ExitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(startclient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(undirectedRadioButton)
                    .add(UndirectedNetworkHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DirectedNetworkHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(directedRaidioButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(WeightedNetworkHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(WeightedCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(StartButton)
                    .add(StopButton)
                    .add(ExitButton))
                .add(54, 54, 54)
                .add(startclient)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabelServerResponse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setToolTipText("");
        jPanel3.setPreferredSize(new java.awt.Dimension(300, 109));

        LoadAttributesButton.setText("Start with loaded attributes");
        LoadAttributesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadAttributesButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText("attributes after loading your network ");

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel8.setText("Click here  if  you  have  loaded   new");

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel9.setText("This will not start a new computation");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(32, 32, 32)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 214, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jLabel3)
                                .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(LoadAttributesButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 284, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(LoadAttributesButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel9)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("CentiScaPe Menu");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Warning"));
        jPanel6.setPreferredSize(new java.awt.Dimension(300, 149));

        jPanel4.setPreferredSize(new java.awt.Dimension(300, 120));

        jLabel4.setText("Centralities are computed for ");

        jLabel5.setText("connected  networks. If  there ");

        jLabel6.setText("are isolated  components, the");

        jLabel7.setText("results will be unreliable.");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                                .add(jLabel4)
                                .add(1, 1, 1))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(4, 4, 4))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel7)
                .add(30, 30, 30))
        );

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel2))
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 523, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 242, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel5);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1058, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void LoadAttributesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadAttributesButtonActionPerformed
        // TODO add your handling code here:
        int answer = 0;
        if (iscurrentnetworkchanged()) {
            System.out.println("network changed");
            Object[] options = {"Continue", "Abort"};
            answer = JOptionPane.showOptionDialog(this.cyDesktopService.getJFrame(),
                    "You have changed the current network. "
                    + "Please check the loaded attributes "
                    + "belong to the current network. If not "
                    + "please load the new ones.", "CentiScaPe",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);

        } else {
            System.out.println("network not changed");
        }

        if (answer == 0) {
            currentnetworkview = cyApplicationManager.getCurrentNetworkView();
            currentnetwork = currentnetworkview.getModel();
            CyTable currentnetworktable = currentnetwork.getDefaultNetworkTable();
            changelastworkednetwork(currentnetwork, currentnetworkview);
            VectorResults.clear();
            System.out.println("load from f currentnetworkview = cyApplicationManager.getCurrentNetworkView();iles");
            //  public Vector<Centrality> VectorResults = new Vector();

            /*
             * CyAttributes currentNetworkAttributes =
             * Cytoscape.getNetworkAttributes(); String networkidentifier =
             * Cytoscape.getCurrentNetwork().getIdentifier(); if
             * (currentNetworkAttributes.hasAttribute(Cytoscape.getCurrentNetwork().getIdentifier(),
             * "CentiScaPe Diameter")) { System.out.println("diameter already
             * loaded"); } if
             * (currentNetworkAttributes.hasAttribute(Cytoscape.getCurrentNetwork().getIdentifier(),
             * "CentiScaPe Average Distance")) { System.out.println("Average
             * distance already loaded"); }
             */
            boolean attributesloaded = false;

            if (isalreadyloaded("Degree unDir")) {
                attributesloaded = true;
                System.out.println("degree already loaded");
                double results[] = calculateglobalparameters("Degree unDir");
                ImplCentrality degreeCentrality = new ImplCentrality("Degree unDir", true,
                        results[0], results[1], results[2]);
                VectorResults.add(degreeCentrality);


                currentnetworktable.getRow(currentnetwork.getSUID()).set("Degree mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Degree Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Degree min value unDir", results[1]);

                LoadedCentralities[2] = true;
            }
            if (isalreadyloaded("Eccentricity unDir")) {
                attributesloaded = true;
                System.out.println("eccentricity already loaded");

                double results[] = calculateglobalparameters("Eccentricity unDir");
                ImplCentrality eccentricityCentrality = new ImplCentrality("Eccentricity unDir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(eccentricityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Eccentricity mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Eccentricity Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Eccentricity min value unDir", results[1]);
                LoadedCentralities[3] = true;
            }
            if (isalreadyloaded("Radiality unDir")) {
                attributesloaded = true;
                System.out.println("radiality already loaded");
                double results[] = calculateglobalparameters("Radiality unDir");
                ImplCentrality radialityCentrality = new ImplCentrality("Radiality unDir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(radialityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Radiality mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Radiality Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Radiality min value unDir", results[1]);
                LoadedCentralities[4] = true;
            }
            if (isalreadyloaded("Closeness unDir")) {
                attributesloaded = true;
                System.out.println("closeness already loaded");
                double results[] = calculateglobalparameters("Closeness unDir");
                ImplCentrality closenessCentrality = new ImplCentrality("Closeness unDir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(closenessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Closeness mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Closeness Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Closeness min value unDir", results[1]);
                LoadedCentralities[5] = true;
            }
            if (isalreadyloaded("Stress unDir")) {
                attributesloaded = true;
                System.out.println("Stress already loaded");
                double results[] = calculateglobalparameters("Stress unDir");
                ImplCentrality stressCentrality = new ImplCentrality("Stress unDir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(stressCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Stress mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Stress Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Stress min value unDir", results[1]);
                LoadedCentralities[6] = true;
            }
            if (isalreadyloaded("Betweenness unDir")) {
                attributesloaded = true;
                System.out.println("betweenness already loaded");
                double results[] = calculateglobalparameters("Betweenness unDir");
                ImplCentrality betweennessCentrality = new ImplCentrality("Betweenness unDir", true,
                        results[0], results[1], results[2]);
                VectorResults.add(betweennessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Betweenness mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Betweenness Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Betweenness min value unDir", results[1]);
                LoadedCentralities[7] = true;
            }
            if (isalreadyloaded("Centroid unDir")) {
                attributesloaded = true;
                System.out.println("centroid already loaded");
                double results[] = calculateglobalparameters("Centroid unDir");
                ImplCentrality centroidCentrality = new ImplCentrality("Centroid unDir", true,
                        results[0], results[1], results[2]);
                VectorResults.add(centroidCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Centroid mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Centroid Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Centroid min value unDir", results[1]);
                LoadedCentralities[8] = true;
            }
            if (isalreadyloaded("EigenVector unDir")) {
                attributesloaded = true;
                System.out.println("EigenVector already loaded");

                double results[] = calculateglobalparameters("EigenVector unDir");
                ImplCentrality eccentricityCentrality = new ImplCentrality("EigenVector unDir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(eccentricityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("EigenVector mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("EigenVector Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("EigenVector min value unDir", results[1]);
                LoadedCentralities[9] = true;
            }
            if (isalreadyloaded("Bridging unDir")) {
                attributesloaded = true;
                System.out.println("Bridging already loaded");

                double results[] = calculateglobalparameters("Bridging unDir");
                ImplCentrality eccentricityCentrality = new ImplCentrality("Bridging unDir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(eccentricityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Bridging mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Bridging Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Bridging min value unDir", results[1]);
                LoadedCentralities[10] = true;
            }
            if (isalreadyloaded("Edge Betweenness unDir")) {
                attributesloaded = true;
                System.out.println("Edge Betweenness already loaded");

                double results[] = calculateglobalparametersforedgeattribute("Edge Betweenness unDir");
                ImplCentrality edgeBetweennessCentrality = new ImplCentrality("Edge Betweenness unDir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(edgeBetweennessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Edge Betweenness mean value unDir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Edge Betweenness Max value unDir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Edge Betweenness min value unDir", results[1]);
                LoadedCentralities[11] = true;
            }
            if (loadCentrality("OutDegree", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("InDegree", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Eccentricity Dir", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Radiality Dir", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Closeness Dir", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Stress Dir", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Betweenness Dir", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Centroid Dir", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("EigenVector Dir", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Bridging Dir", currentnetworktable)) {
                attributesloaded = true;
            }

            if (isalreadyloaded("Edge Betweenness Dir")) {
                attributesloaded = true;
                System.out.println("Edge Betweenness already loaded");

                double results[] = calculateglobalparametersforedgeattribute("Edge Betweenness Dir");
                ImplCentrality dirEdgeBetweennessCentrality = new ImplCentrality("Edge Betweenness Dir", true, results[0],
                        results[1], results[2]);
                VectorResults.add(dirEdgeBetweennessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Edge Betweenness mean value Dir", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Edge Betweenness Max value Dir", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Edge Betweenness min value Dir", results[1]);
                LoadedCentralities[11] = true;
            }

            if (attributesloaded) {
                changelastworkednetwork(currentnetwork, currentnetworkview);
                centiscapecore.createCentiScaPeVisualizer();
                //  CentVisualizer visualizer = CentiScaPeCore.getvisualizer();
                centiscapecore.getvisualizer().setEnabled(VectorResults);
                //  visualizer.setEnabled(VectorResults);
                //        CytoscapeDesktop desktop = Cytoscape.getDesktop();
                //        CytoPanel cytoPaneleast = desktop.getCytoPanel(SwingConstants.EAST);
                //cytoPaneleast.removeAll();
                System.out.println("open results");
                //      int index = cytoPaneleast.indexOfComponent(visualizer);
                //      cytoPaneleast.setSelectedIndex(index);
                //      cytoPaneleast.add("Results", visualizer);

                //    cytoPaneleast.setState(CytoPanelState.DOCK);
            } else {
                System.out.println("no attributes loaded");
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), "No CentiScaPe attributes loaded",
                        "CentiScaPe", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_LoadAttributesButtonActionPerformed

    }

    public boolean loadCentrality(String centrality, CyTable currentnetworktable) {
        boolean result = false;
        if (isalreadyloaded(centrality)) {
            result = true;
            System.out.println(centrality + " already loaded");
            double results[] = calculateglobalparameters(centrality);
            ImplCentrality eccentricityCentrality = new ImplCentrality(centrality, true, results[0],
                    results[1], results[2]);
            VectorResults.add(eccentricityCentrality);
            currentnetworktable.getRow(currentnetwork.getSUID()).set(centrality + " mean value Dir", results[0]);
            currentnetworktable.getRow(currentnetwork.getSUID()).set(centrality + " Max value Dir", results[2]);
            currentnetworktable.getRow(currentnetwork.getSUID()).set(centrality + " min value Dir", results[1]);
            //LoadedCentralities[10] = true;
        }
        return result;
    }

    private double[] calculateglobalparameters(String centrality) {
        double results[] = new double[3];
        double min = Double.MAX_VALUE, max = -Double.MAX_VALUE, totalsum = 0;
        //  CyAttributes currentNodeAttributes = Cytoscape.getNodeAttributes();
        double totalnodecount = currentnetwork.getNodeCount();
        CyTable currenttable = currentnetwork.getDefaultNodeTable();
        for (Iterator i = currentnetwork.getNodeList().listIterator(); i.hasNext();) {
            CyNode currentnode = (CyNode) i.next();

            //  double currentcentrality = currentNodeAttributes.getDoubleAttribute(currentnode.getIdentifier(), centrality);
            double currentcentrality = currenttable.getRow(currentnode.getSUID()).get(centrality, Double.class);
            if (currentcentrality < min) {
                min = currentcentrality;
            }
            if (currentcentrality > max) {
                max = currentcentrality;
            }
            totalsum = totalsum + currentcentrality;

        }
        double mean = totalsum / totalnodecount;
        results[0] = mean;
        results[1] = min;
        results[2] = max;
        return results;
    }

    private double[] calculateglobalparametersforedgeattribute(String centrality) {
        double results[] = new double[3];
        double min = Double.MAX_VALUE, max = -Double.MAX_VALUE, totalsum = 0;
        //  CyAttributes currentNodeAttributes = Cytoscape.getNodeAttributes();
        double totalEdgeCount = currentnetwork.getEdgeCount();
        CyTable currenttable = currentnetwork.getDefaultEdgeTable();
        for (Iterator i = currentnetwork.getEdgeList().listIterator(); i.hasNext();) {
            CyEdge currentEdge = (CyEdge) i.next();

            //  double currentcentrality = currentNodeAttributes.getDoubleAttribute(currentnode.getIdentifier(), centrality);
            double currentcentrality = currenttable.getRow(currentEdge.getSUID()).get(centrality, Double.class);
            if (currentcentrality < min) {
                min = currentcentrality;
            }
            if (currentcentrality > max) {
                max = currentcentrality;
            }
            totalsum = totalsum + currentcentrality;

        }
        double mean = totalsum / totalEdgeCount;
        results[0] = mean;
        results[1] = min;
        results[2] = max;
        return results;
    }
    private void CentroidValueHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CentroidValueHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(8);
        help.setVisible(true);
    }//GEN-LAST:event_CentroidValueHelpButtonActionPerformed

    private void BetweennessHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BetweennessHelpButtonActionPerformed
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(7);
        help.setVisible(true);
    }//GEN-LAST:event_BetweennessHelpButtonActionPerformed

    private void StressHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StressHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(6);
        help.setVisible(true);
    }//GEN-LAST:event_StressHelpButtonActionPerformed

    private void RadialityHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadialityHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(4);
        help.setVisible(true);
    }//GEN-LAST:event_RadialityHelpButtonActionPerformed

    private void DegreeHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DegreeHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(2);
        help.setVisible(true);
    }//GEN-LAST:event_DegreeHelpButtonActionPerformed

    private void DiameterHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiameterHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(0);
        help.setVisible(true);
    }//GEN-LAST:event_DiameterHelpButtonActionPerformed

    private void EccentricityHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EccentricityHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(3);
        help.setVisible(true);
    }//GEN-LAST:event_EccentricityHelpButtonActionPerformed

    private void AverageHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AverageHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(1);
        help.setVisible(true);
    }//GEN-LAST:event_AverageHelpButtonActionPerformed

    private void ClosenessHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosenessHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(5);
        help.setVisible(true);
    }//GEN-LAST:event_ClosenessHelpButtonActionPerformed

    private void unselectallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unselectallButtonActionPerformed
        // TODO add your handling code here:

        DiameterCheckBox.setSelected(false);
        AverageDistanceCheckBox.setSelected(false);
        DegreeCheckBox.setSelected(false);
        EccentricityCheckBox.setSelected(false);
        RadialityCheckBox.setSelected(false);
        ClosenessCheckBox.setSelected(false);
        StressCheckBox.setSelected(false);
        BetweennessCheckBox.setSelected(false);
        CentroidCheckBox.setSelected(false);
        EigenVectorCheckBox.setSelected(false);
        BridgingCheckBox.setSelected(false);
        EdgeBetweennessCheckBox.setSelected(false);
        verifyselection();
    }//GEN-LAST:event_unselectallButtonActionPerformed

    private void selectallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectallButtonActionPerformed
        // TODO add your handling code here:

        verifyselection();
    }//GEN-LAST:event_selectallButtonActionPerformed

    private void selectallButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectallButtonMouseClicked
        // TODO add your handling code here:
        DiameterCheckBox.setSelected(true);
        AverageDistanceCheckBox.setSelected(true);
        DegreeCheckBox.setSelected(true);
        EccentricityCheckBox.setSelected(true);
        RadialityCheckBox.setSelected(true);
        ClosenessCheckBox.setSelected(true);
        StressCheckBox.setSelected(true);
        BetweennessCheckBox.setSelected(true);
        CentroidCheckBox.setSelected(true);
        EigenVectorCheckBox.setSelected(true);
        BridgingCheckBox.setSelected(true);
        EdgeBetweennessCheckBox.setSelected(true);
        verifyselection();
    }//GEN-LAST:event_selectallButtonMouseClicked

    private void CentroidCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CentroidCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_CentroidCheckBoxActionPerformed

    private void BetweennessCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BetweennessCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_BetweennessCheckBoxActionPerformed

    private void StressCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StressCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_StressCheckBoxActionPerformed

    private void ClosenessCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosenessCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_ClosenessCheckBoxActionPerformed

    private void RadialityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadialityCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_RadialityCheckBoxActionPerformed

    private void EccentricityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EccentricityCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_EccentricityCheckBoxActionPerformed

    private void DegreeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DegreeCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_DegreeCheckBoxActionPerformed

    private void AverageDistanceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AverageDistanceCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_AverageDistanceCheckBoxActionPerformed

    private void DiameterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiameterCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_DiameterCheckBoxActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // call stop

        // CyNetworkView view = Cytoscape.getCurrentNetworkView();

        Object[] options = {"YES", "NO"};
        int answer = JOptionPane.showOptionDialog(null, "Are you sure you want to exit?", "CentiScaPe",
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);

        if (answer == 0) {
            if (calculating) {
                if (ThrEng.isAlive()) {
                    ThrEng.endprogram();
                }
                //        stopcalculus();
            }
            centiscapecore.closeCentiscapevisualizer();
            centiscapecore.closecore();
            centiscapecore.closeCentiscapeStartMenu();

//CytoPanel cytopanelwest = centiscapecore.cyDesktopService.getCytoPanel(CytoPanelName.WEST);

            //      int indexwest = cytopanelwest.indexOfComponent(this);

            //   closeCentiScaPe();
            // Cytoscape.getDesktop().getSwingPropertyChangeSupport().removePropertyChangeListener(centiscapecore.listener);



        }
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // TODO add your handling code here:

        if (directedRaidioButton.isSelected()) {
            if (calculating) {
                if (Thrd.isAlive()) {
                    CentiScaPeDirectedAlgorithm.stopAlgo();
                }
            }
            stopcalculus();
        } else {
            if (calculating) {
                if (ThrEng.isAlive()) {
                    ThrEng.endprogram();
                }
                stopcalculus();
            }
        }
        verifyselection();
    }//GEN-LAST:event_StopButtonActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
     //   System.out.println("entro in start");

        currentnetworkview = cyApplicationManager.getCurrentNetworkView();
        if (currentnetworkview == null) {
            System.out.println("No network1");
            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                    "No network selected!", "CentiScaPe", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            currentnetworkview = cyApplicationManager.getCurrentNetworkView();
        }
        currentnetwork = currentnetworkview.getModel();
        if (currentnetwork.getNodeCount() == 0) {
            System.out.println("No network1");
            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                    "No network exists!", "CentiScaPe", JOptionPane.WARNING_MESSAGE);
            return;
        }

        /*
         * System.out.println("la network e' " +
         * Cytoscape.getCurrentNetworkView().getView().getTitle()); if
         * (Cytoscape.getCurrentNetworkView().getNodeViewCount() == 0) {
         * System.out.println("No network");
         * JOptionPane.showMessageDialog(Cytoscape.getCurrentNetworkView().getComponent(),
         * "No network selected!", "CentiScaPe", JOptionPane.WARNING_MESSAGE); }
         * else { System.out.println("yes network");
         */


        int answer = 0;
        if (iscurrentnetworkchanged()) {
            System.out.println("network changed");
            Object[] options = {"Start computation", "Abort computation"};
            answer = JOptionPane.showOptionDialog(this.cyDesktopService.getJFrame(), "You have changed the current network. "
                    + "Starting a new computation you will\n"
                    + "loose all the previous network attributes. "
                    + "Save them before proceeding.", "CentiScaPe",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);

        } else {
            System.out.println("network not changed");
        }
        if (answer == 0) {
            changelastworkednetwork(cyApplicationManager.getCurrentNetwork(), cyApplicationManager.getCurrentNetworkView());
            
            this.setEnabled(false);
            //verify if it is weighted 
            isWeighted = WeightedCheckBox.isSelected();
            //enter the edge attribute to be selected - edge attribute name wich gives weights of edges
            if (isWeighted) {
                // take attribute from user
                edgeWeightAttribute = JOptionPane.showInputDialog(null, "Enter the Edge Attribute to be used as edge weight for the network");
                try{while (currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute) == null) {
                    //pop a menu showing that it is not in the list and 
                    edgeWeightAttribute = JOptionPane.showInputDialog(null, "Oops! there is no such attribute found in the edge table. Looks like you have misspelled attribute name.\n"+"Enter the Edge Attribute to be used as edge weight for the network");              
                }}catch(Exception ex){
                    System.out.println("user has pressed cancel button. Aborting!");
                    return;
                }
                if(currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute).getType() == Double.class){
                    System.out.println("double edge weight");
                    attrtype = Double.class;
                }else if(currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute).getType() == Integer.class){
                    System.out.println("integer edge weight");
                    attrtype = Integer.class;
                }
                else if(currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute).getType() == Long.class){
                    System.out.println("Long edge weight");
                    attrtype = Long.class;
                }
                else{
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), edgeWeightAttribute+
                            " is neither an integer nor a double attribute! please specify the correct edge attribute",
                            "CentiScaPe", JOptionPane.ERROR_MESSAGE);
                    System.out.println("ERROR!!");
                    return ;
                }
            }
            inizio = System.currentTimeMillis();
            System.out.println("start time =" + inizio);
            // verify Checkbox
            CheckedCentralities[0] = DiameterCheckBox.isSelected();
            CheckedCentralities[1] = AverageDistanceCheckBox.isSelected();
            CheckedCentralities[2] = DegreeCheckBox.isSelected();
            CheckedCentralities[3] = EccentricityCheckBox.isSelected();
            CheckedCentralities[4] = RadialityCheckBox.isSelected();
            //if (RadialityCheckBox.isSelected()) {
            //DiameterCheckBox.setSelected(true);
            //   CheckedCentralities[0] = true;
            // }
            CheckedCentralities[5] = ClosenessCheckBox.isSelected();
            CheckedCentralities[6] = StressCheckBox.isSelected();
            CheckedCentralities[7] = BetweennessCheckBox.isSelected();
            CheckedCentralities[8] = CentroidCheckBox.isSelected();
            CheckedCentralities[9] = EigenVectorCheckBox.isSelected();
            CheckedCentralities[10] = BridgingCheckBox.isSelected();
            CheckedCentralities[11] = EdgeBetweennessCheckBox.isSelected();
            if (undirectedRadioButton.isSelected()) {
                //undirectedRadioButton.setVisible(false);
                //undirectedRadioButton.hide();
                System.out.println("Enter in undirected networks\n");

                int secondanswer = 0;
                // riaggiungere in centiscape3

                String listofloaded = verifyloadedattributes(CheckedCentralities);
                //  System.out.println("la stringa loaded ??" + listofloaded);
                if (listofloaded != null) {


                    Object[] options = {"Start computation", "Abort computation"};
                    secondanswer =
                            JOptionPane.showOptionDialog(
                            this.cyDesktopService.getJFrame(),
                            listofloaded + "already loaded.\n "
                            + "A new computation may need a long time.\n"
                            + "Unselect the centralities you do not need\n"
                            + "to recalculate before starting a new computation.", "CentiScaPe",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                            null, options, options[0]);

                //    System.out.println("quelle gia' presenti sono " + listofloaded);

                } else {

                    System.out.println("e' nullo");

                }


                CentiScaPealg.setChecked(CheckedCentralities);

                if (secondanswer == 0) {

                    removeattributes();
                    calculatingresult();
                    ThrEng = new CentiScaPeThreadEngine(CentiScaPealg, currentnetwork, currentnetworkview);
                    ThrEng.setCaller(this);
                    ThrEng.start();
                    /*
                     * ThrEng.yield();
                     * CentiScaPeCore.visualizer.setEnabled(CentiScaPealg.VectorResults);
                     * CytoscapeDesktop desktop = Cytoscape.getDesktop();
                     * CytoPanel cytoPaneleast =
                     * desktop.getCytoPanel(SwingConstants.EAST); int index =
                     * cytoPaneleast.indexOfComponent(CentiScaPeCore.visualizer);
                     * cytoPaneleast.setSelectedIndex(index);
                     * cytoPaneleast.add("CentiScaPe Results",
                     * CentiScaPeCore.visualizer); if
                     * (CentiScaPealg.openResultPanel) {
                     * cytoPaneleast.setState(CytoPanelState.DOCK); } else {
                     * cytoPaneleast.setState(CytoPanelState.HIDE); }
                     */
                    this.setEnabled(true);
                }
            } else {

                System.out.println("enter in directed networks\n");
                if (checkIfAlreadyPresentAndDelete()) {
                    Thrd = new CentiScaPeDirectedThreadEngine(currentnetwork, CheckedCentralities, directedCentralities, this, centiscapecore);
                    Thrd.start();
                }
            }
        }
    }//GEN-LAST:event_StartButtonActionPerformed
    public boolean checkIfAlreadyPresentAndDelete() {
        boolean enterIntoAlgo = true;
        boolean[] checkedButAlreadyLoadedDirectedCentralities = new boolean[numberofcentralities + 1];
        StringBuffer toDisplay = new StringBuffer();
        int checkedButAlreadyLoadedDirectedCentralitiesNum = 0;
        CyTable currentnodetable = currentnetwork.getDefaultNodeTable();
        CyTable currentnetworktable = currentnetwork.getDefaultNetworkTable();
        CyTable currentedgetable = currentnetwork.getDefaultEdgeTable();
        // CyAttributes currentNetworkAttributes = Cytoscape.getNetworkAttributes();

        directedCentralities = new String[numberofcentralities];
        directedCentralities[0] = "Diameter Dir";
        directedCentralities[1] = "Average Distance Dir";
        directedCentralities[2] = "OutDegree";
        directedCentralities[3] = "Eccentricity Dir";
        directedCentralities[4] = "Radiality Dir";
        directedCentralities[5] = "Closeness Dir";
        directedCentralities[6] = "Stress Dir";
        directedCentralities[7] = "Betweenness Dir";
        directedCentralities[8] = "Centroid Dir";
        directedCentralities[9] = "EigenVector Dir";
        directedCentralities[10] = "Bridging Dir";
        directedCentralities[11] = "Edge Betweenness Dir";
        for (int roll = 0; roll < numberofcentralities; roll++) {
            if (CheckedCentralities[roll] == true) {
                if (currentnetworktable.getColumn(directedCentralities[roll]) != null || isalreadyloaded(directedCentralities[roll])) {
                    checkedButAlreadyLoadedDirectedCentralitiesNum++;
                    checkedButAlreadyLoadedDirectedCentralities[roll] = true;
                    //toDisplay.append(directedCentralities[roll], 9, directedCentralities[roll].length());
                    //toDisplay.append(", ");
                    toDisplay.append(directedCentralities[roll] + ", ");
                } else {
                    checkedButAlreadyLoadedDirectedCentralities[roll] = false;
                }
            }
        }
        //
        if (CheckedCentralities[2] == true) {
            if (currentnetworktable.getColumn("InDegree") != null || isalreadyloaded("InDegree")) {
                checkedButAlreadyLoadedDirectedCentralitiesNum++;
                checkedButAlreadyLoadedDirectedCentralities[numberofcentralities] = true;
               // toDisplay.append("In Degree Dir", 9, "In Degree Dir".length());
               // toDisplay.append(", ");
                 toDisplay.append("InDegree, ");
            } else {
                checkedButAlreadyLoadedDirectedCentralities[numberofcentralities] = false;
            }
        }

        if (checkedButAlreadyLoadedDirectedCentralitiesNum == 0) {
            toDisplay = null;
        } else if (checkedButAlreadyLoadedDirectedCentralitiesNum == 1) {
            // append is
            toDisplay.deleteCharAt(toDisplay.lastIndexOf(","));
            toDisplay.append("is ");
        } else {
            //insert and and append are
            toDisplay.deleteCharAt(toDisplay.lastIndexOf(","));
            toDisplay.append("are ");
            toDisplay.insert(toDisplay.lastIndexOf(","), " and");
            toDisplay.deleteCharAt(toDisplay.lastIndexOf(","));
        }
        int useranswer = 0;
        //System.out.println(toDisplay);
        if (toDisplay != null) {
            Object[] options = {"Start computation", "Abort computation"};
            useranswer =
                    JOptionPane.showOptionDialog(
                    this.cyDesktopService.getJFrame(),
                    toDisplay + "already loaded.\n "
                    + "A new computation may need a long time.\n"
                    + "Unselect the centralities you do not need\n"
                    + "to recalculate before starting a new computation.", "CentiScaPe",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
        }
        if (useranswer == 0) {
            //delete all previous loaded centralities
            calculatingresult();
            for (int roll = 0; roll < 2; roll++) {
                if (CheckedCentralities[roll] || checkedButAlreadyLoadedDirectedCentralities[roll]) {
                    if (currentnetworktable.getColumn(directedCentralities[roll]) != null) {
                        currentnetworktable.deleteColumn(directedCentralities[roll]);
                    }
                }
            }
            for (int roll = 2; roll < numberofcentralities; roll++) {
                if (roll != 11) {
                    if (CheckedCentralities[roll] || checkedButAlreadyLoadedDirectedCentralities[roll]) {
                        currentnodetable.deleteColumn(directedCentralities[roll]);
                        currentnetworktable.deleteColumn(directedCentralities[roll].split(" ")[0] + " Max value Dir");
                        currentnetworktable.deleteColumn(directedCentralities[roll].split(" ")[0] + " min value Dir");
                        currentnetworktable.deleteColumn(directedCentralities[roll].split(" ")[0] + " mean value Dir");
                    }
                } else {
                    if (CheckedCentralities[roll] || checkedButAlreadyLoadedDirectedCentralities[roll]) {
                        currentedgetable.deleteColumn(directedCentralities[roll]);
                        currentnetworktable.deleteColumn(directedCentralities[roll].split(" ")[0] + " Max value Dir");
                        currentnetworktable.deleteColumn(directedCentralities[roll].split(" ")[0] + " min value Dir");
                        currentnetworktable.deleteColumn(directedCentralities[roll]. split(" ")[0]+ " mean value Dir");
                    }

                }
            }
            //
            if (CheckedCentralities[2] || checkedButAlreadyLoadedDirectedCentralities[numberofcentralities]) {
                currentnodetable.deleteColumn("InDegree");
                currentnetworktable.deleteColumn("InDegree" + " Max value Dir");
                currentnetworktable.deleteColumn("InDegree" + " min value Dir");
                currentnetworktable.deleteColumn("InDegree" + " mean value Dir");
                currentnodetable.deleteColumn("OutDegree");
                currentnetworktable.deleteColumn("OutDegree" + " Max value Dir");
                currentnetworktable.deleteColumn("OutDegree" + " min value Dir");
                currentnetworktable.deleteColumn("OutDegree" + " mean value Dir");
            }

        } else {
            System.out.println("Aborted by user");
            enterIntoAlgo = false;
        }
        return enterIntoAlgo;
        //deleted all the previous centralities
        //now execute directed centralities depending upon users answer
    }
    private void EigenVectorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EigenVectorCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_EigenVectorCheckBoxActionPerformed

    private void EigenVectorHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EigenVectorHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(9);
        help.setVisible(true);
    }//GEN-LAST:event_EigenVectorHelpButtonActionPerformed

    private void undirectedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undirectedRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_undirectedRadioButtonActionPerformed

    private void directedRaidioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directedRaidioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_directedRaidioButtonActionPerformed

    private void BridgingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BridgingCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_BridgingCheckBoxActionPerformed

    private void BirdgingHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BirdgingHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(10);
        help.setVisible(true);
    }//GEN-LAST:event_BirdgingHelpButtonActionPerformed

    public long lngUseCentiscapeWS(long lngCent, String strNetworkName) {
       /* long rc = -1;
        long lngID;     // ID richiesta andata a buon fine
        try {
            //JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
            //   "Please select centralities to evaluate", "CentiScaPe", JOptionPane.WARNING_MESSAGE);
            String strUser = JOptionPane.showInputDialog(this.cyDesktopService.getJFrame(),
                    "Please insert your mail for the answer");
            if (strUser.isEmpty() || !strUser.contains("@")) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        "Please insert a valid @mail", "CentiScaPe",
                        JOptionPane.INFORMATION_MESSAGE);
                return -2;
            }
            jLabel1.setText("Connecting to CentiScaPe web service");
            pckcentiscapews.CentiscapeWS_Service service =
                    new pckcentiscapews.CentiscapeWS_Service();
            pckcentiscapews.CentiscapeWS port = service.getCentiscapeWSPort();
            // passa la richiesta al web service:
            // verifica l'utente e rende il numero ID di richiesta
            jLabel1.setText("Preparing data");
            byte[] pUser = new byte[strUser.length() + 1];
            int i;
            for (i = 0; i < strUser.length(); i++) {
                pUser[i] = (byte) strUser.charAt(i);
            }
            pUser[i] = 0;
            jLabel1.setText("Getting request number");
            lngID = port.request(pUser, lngCent);
            if (lngID >= 0) {
                // esporta la rete nel formato .sif
                jLabel1.setText("Getting network data...");
                StringWriter f = new StringWriter();
                CyNetwork netToSave = cyApplicationManager.getCurrentNetworkView().getModel();
                //InteractionWriter.writeInteractions(netToSave, f, null);
                // trova la lunghezza del buffer da trasferire
                int intFileLength = (int) f.getBuffer().length();
                // nome della rete
                String strRete = String.format("%s_(%d)", strNetworkName, lngID);
                byte[] pNetworkName = new byte[strRete.length() + 1];
                for (i = 0; i < strRete.length(); i++) {
                    pNetworkName[i] = (byte) strRete.charAt(i);
                }
                pNetworkName[i] = 0;
                // alloca buffer per contenere il file .sif
                byte[] pBuffer = new byte[intFileLength];
                // stringa col contenuto
                String strFileSif = f.toString();
                // carica il buffer
                jLabel1.setText("Loading network data...");
                for (i = 0; i < intFileLength; i++) {
                    pBuffer[i] = (byte) strFileSif.charAt(i);
                }
                // trasmette ID, mail, nome rete e dati
                jLabel1.setText("Sending network data, please wait...");
                rc = port.loadNetwork(lngID, pUser, pNetworkName, pBuffer, intFileLength);

                if (rc == 0) {
                    jLabel1.setText("Network successfully transferred");
                    System.out.println("Network transferred");
                } else {
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                            "Can't load network in webservice", "CentiScaPe",
                            JOptionPane.ERROR_MESSAGE);
                    jLabel1.setText("Can't load network in web service");
                    System.out.println("Can't load network in webservice");
                }
            } else {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        "Can't get request number from webservice", "CentiScaPe",
                        JOptionPane.ERROR_MESSAGE);
                System.out.println("Can't get request number from webservice");
            }
        } catch (Exception e) {
            String strE = e.getMessage();
            if (strE == null) {
                return -2;
            }
            jLabel1.setText("Exception in using plugin");
            if (!strE.isEmpty()) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        strE, "CentiScaPe",
                        JOptionPane.ERROR_MESSAGE);
                System.out.println(strE);
            } else {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        "Exception in lngUseCentiscapeWS function", "CentiScaPe",
                        JOptionPane.ERROR_MESSAGE);
            }
            return rc;
        }
        if (rc == 0) {
            return lngID;   //codice richiesta
        } else {*/
            return -1;
       // }
    }
    private void startclientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startclientActionPerformed
        // TODO add your handling code here:      
        System.out.println("hello Carlo!");
        CyNetwork network;
        CyNetworkView view;
        view = cyApplicationManager.getCurrentNetworkView();
        network = cyApplicationManager.getCurrentNetwork();

        /*
         * try { String serverlocation =
         * java.net.InetAddress.getLocalHost().getHostName(); //
         * KnockKnockClient.startclient(java.net.InetAddress.getLocalHost().getHostName());
         * CentiScaPeClient centiscapeclient = new CentiScaPeClient(network);
         *
         * centiscapeclient.startclient(serverlocation); } catch (IOException e)
         * { System.err.println("Couldn't get I/O for the connection to:"); }
         */





        if (network.getNodeCount() == 0) {
            System.out.println("No network");
            JOptionPane.showMessageDialog(null, "No network selected!", "CentiScaPe", JOptionPane.WARNING_MESSAGE);

            return;
        }
        long lngCent = 0;
        if (AverageDistanceCheckBox.isSelected()) {
            lngCent += 1;
        }
        if (DegreeCheckBox.isSelected()) {
            lngCent += 2;
        }
        if (RadialityCheckBox.isSelected()) {
            lngCent += 4;
        }
        if (ClosenessCheckBox.isSelected()) {
            lngCent += 8;
        }
        if (EccentricityCheckBox.isSelected()) {
            lngCent += 16;
        }
        if (StressCheckBox.isSelected()) {
            lngCent += 32;
        }
        if (BetweennessCheckBox.isSelected()) {
            lngCent += 64;
        }
        if (CentroidCheckBox.isSelected()) {
            lngCent += 128;
        }
        if (lngCent == 0) {
            JOptionPane.showMessageDialog(null, "Please select centralities to evaluate");
        } else {
            String strNomeRete = "" + network.getSUID(); //  nwtwork.getTitle();
            String strRete = strNomeRete.replaceAll(" ", "_");
            CentiScaPeClient centiscapeclient = new CentiScaPeClient(network);


            try {
                long lngID = centiscapeclient.lngUseCentiscapeWS(lngCent, strRete, network, this);
                if (lngID >= 0) {
                    String strFileName = String.format("%s_(%d).xgmml", strRete, lngID);
                    JOptionPane.showMessageDialog(null, "Results (in file: " + strFileName + ") will be sent to your mail as soon as they are ready", "CentiScaPe", JOptionPane.INFORMATION_MESSAGE);

                } else if (lngID == -1) {
                    JOptionPane.showMessageDialog(null, "Call server failed", "CentiScaPe", JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (IOException e) {
                System.err.println("Couldn't get I/O for the connection to:");
            }
        }

    }//GEN-LAST:event_startclientActionPerformed

    private void EdgeBetweennessCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeBetweennessCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_EdgeBetweennessCheckBoxActionPerformed

    private void EdgeBetweennessHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeBetweennessHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(11);
        help.setVisible(true);
    }//GEN-LAST:event_EdgeBetweennessHelpButtonActionPerformed

    private void WeightedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightedCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeightedCheckBoxActionPerformed

    private void StopButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StopButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_StopButtonMouseClicked

    private void UndirectedNetworkHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndirectedNetworkHelpButtonActionPerformed
 CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(12);
        help.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_UndirectedNetworkHelpButtonActionPerformed

    private void DirectedNetworkHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectedNetworkHelpButtonActionPerformed
       CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(13);
        help.setVisible(true);  // TODO add your handling code here:
    }//GEN-LAST:event_DirectedNetworkHelpButtonActionPerformed

    private void WeightedNetworkHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightedNetworkHelpButtonActionPerformed
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(14);
        help.setVisible(true); // TODO add your handling code here:
    }//GEN-LAST:event_WeightedNetworkHelpButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AverageDistanceCheckBox;
    private javax.swing.JButton AverageHelpButton;
    private javax.swing.JCheckBox BetweennessCheckBox;
    private javax.swing.JButton BetweennessHelpButton;
    private javax.swing.JButton BirdgingHelpButton;
    private javax.swing.JCheckBox BridgingCheckBox;
    private javax.swing.JCheckBox CentroidCheckBox;
    private javax.swing.JButton CentroidValueHelpButton;
    private javax.swing.JCheckBox ClosenessCheckBox;
    private javax.swing.JButton ClosenessHelpButton;
    private javax.swing.JCheckBox DegreeCheckBox;
    private javax.swing.JButton DegreeHelpButton;
    private javax.swing.JCheckBox DiameterCheckBox;
    private javax.swing.JButton DiameterHelpButton;
    private javax.swing.JButton DirectedNetworkHelpButton;
    private javax.swing.JCheckBox EccentricityCheckBox;
    private javax.swing.JButton EccentricityHelpButton;
    private javax.swing.JCheckBox EdgeBetweennessCheckBox;
    private javax.swing.JButton EdgeBetweennessHelpButton;
    private javax.swing.JCheckBox EigenVectorCheckBox;
    private javax.swing.JButton EigenVectorHelpButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton LoadAttributesButton;
    private javax.swing.JCheckBox RadialityCheckBox;
    private javax.swing.JButton RadialityHelpButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JCheckBox StressCheckBox;
    private javax.swing.JButton StressHelpButton;
    private javax.swing.JButton UndirectedNetworkHelpButton;
    private javax.swing.JCheckBox WeightedCheckBox;
    private javax.swing.JButton WeightedNetworkHelpButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton directedRaidioButton;
    private static javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private static javax.swing.JLabel jLabelServerResponse;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton selectallButton;
    private javax.swing.JButton startclient;
    private javax.swing.JRadioButton undirectedRadioButton;
    private javax.swing.JButton unselectallButton;
    // End of variables declaration//GEN-END:variables

    public void endcalculus(int totalnodecount) {

        this.jProgressBar1.setIndeterminate(false);
        jLabel1.setText("Finished: " + totalnodecount + " nodes worked");
        StartButton.setEnabled(true);
        calculating = false;
        StartButton.setEnabled(true);
        fine = System.currentTimeMillis();
        System.out.println("end time =" + fine + ", execution time (millis) = " + (fine - inizio));

    }

    public void stopcalculus() {
        this.jProgressBar1.setIndeterminate(false);
        jLabel1.setText("Interrupted by user, click start to repeat");
        //StartButton.setEnabled(true);
        calculating = false;
        StartButton.setEnabled(true);
    }

    public void calculatingresult() {

        calculating = true;
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setVisible(true);
        jLabel1.setText("Calculating...");
        StartButton.setEnabled(false);

    }

    public static void updatenodecounting(int nodeworked, int totalnodecount) {

        jLabel1.setText("Working: node " + nodeworked + " of " + totalnodecount);


    }

    public void removeattributes() {
        CyTable nodeTable = currentnetwork.getDefaultNodeTable();
        CyTable networkTable = currentnetwork.getDefaultNetworkTable();
        System.out.println("current network table= " + networkTable.toString());
        CyTable edgeTable = currentnetwork.getDefaultEdgeTable();

        if (CheckedCentralities[0] || LoadedCentralities[0]) {
            if (networkTable.getColumn("Diameter unDir") != null) {
                networkTable.deleteColumn("Diameter unDir");
            }

        }

        if (CheckedCentralities[1] || LoadedCentralities[1]) {

            if (networkTable.getColumn("Average Distance unDir") != null) {
                networkTable.deleteColumn("Average Distance unDir");
            }
        }

        if (CheckedCentralities[2] || LoadedCentralities[2]) {

            nodeTable.deleteColumn("Degree unDir");

            networkTable.deleteColumn("Degree Max value unDir");
            networkTable.deleteColumn("Degree min value unDir");
            networkTable.deleteColumn("Degree mean value unDir");
        }
        if (CheckedCentralities[3] || LoadedCentralities[3]) {

            nodeTable.deleteColumn("Eccentricity unDir");


            networkTable.deleteColumn("Eccentricity Max value unDir");
            networkTable.deleteColumn("Eccentricity min value unDir");
            networkTable.deleteColumn("Eccentricity mean value unDir");
        }
        if (CheckedCentralities[4] || LoadedCentralities[4]) {

            nodeTable.deleteColumn("Radiality unDir");


            networkTable.deleteColumn("Radiality Max value unDir");
            networkTable.deleteColumn("Radiality min value unDir");
            networkTable.deleteColumn("Radiality mean value unDir");
        }
        if (CheckedCentralities[5] || LoadedCentralities[5]) {

            nodeTable.deleteColumn("Closeness unDir");


            networkTable.deleteColumn("Closeness Max value unDir");
            networkTable.deleteColumn("Closeness min value unDir");
            networkTable.deleteColumn("Closeness mean value unDir");



        }
        if (CheckedCentralities[6] || LoadedCentralities[6]) {

            nodeTable.deleteColumn("Stress unDir");


            networkTable.deleteColumn("Stress Max value unDir");
            networkTable.deleteColumn("Stress min value unDir");
            networkTable.deleteColumn("Stress mean value unDir");
        }
        if (CheckedCentralities[7] || LoadedCentralities[7]) {

            nodeTable.deleteColumn("Betweenness unDir");


            networkTable.deleteColumn("Betweenness Max value unDir");
            networkTable.deleteColumn("Betweenness min value unDir");
            networkTable.deleteColumn("Betweenness mean value unDir");


        }
        if (CheckedCentralities[8] || LoadedCentralities[8]) {

            nodeTable.deleteColumn("Centroid unDir");


            networkTable.deleteColumn("Centroid Max value unDir");
            networkTable.deleteColumn("Centroid min value unDir");
            networkTable.deleteColumn("Centroid mean value unDir");


        }
        if (CheckedCentralities[9] || LoadedCentralities[9]) {

            if (nodeTable.getColumn("EigenVector unDir") != null) {
                nodeTable.deleteColumn("EigenVector unDir");
                networkTable.deleteColumn("EigenVector Max value unDir");
                networkTable.deleteColumn("EigenVector min value unDir");
                networkTable.deleteColumn("EigenVector mean value unDir");
            }

        }

        if (CheckedCentralities[10] || LoadedCentralities[10]) {

            if (nodeTable.getColumn("Bridging unDir") != null) {
                nodeTable.deleteColumn("Bridging unDir");
                networkTable.deleteColumn("Bridging Max value unDir");
                networkTable.deleteColumn("Bridging min value unDir");
                networkTable.deleteColumn("Bridging mean value unDir");
            }

        }
        if (CheckedCentralities[11] || LoadedCentralities[11]) {

            if (edgeTable.getColumn("Edge Betweenness unDir") != null) {
                edgeTable.deleteColumn("Edge Betweenness unDir");
                networkTable.deleteColumn("Edge Betweenness Max value unDir");
                networkTable.deleteColumn("Edge Betweenness min value unDir");
                networkTable.deleteColumn("Edge Betweenness mean value unDir");
            }

        }
        for (int i = 0; i < numberofcentralities; i++) {
            LoadedCentralities[i] = false;
        }

    }

    public void changelastworkednetwork(CyNetwork newnetwork, CyNetworkView newview) {
        lastworkednetwork = newnetwork;
        lastworkedview = newview;
    }

    public boolean iscurrentnetworkchanged() {

        if (lastworkedview == null) {
            return false;
            //  } else if (lastworkedview.getNodeViewCount() == 0) {
        } else if (lastworkedview.getNodeViews().size() == 0) {
            return false;
        } else {
            return !(lastworkedview.getSUID() == cyApplicationManager.getCurrentNetworkView().getSUID());
        }
    }

    public String verifyloadedattributes(boolean[] selectedCentralities) {

        boolean[] loadedCentralities = new boolean[numberofcentralities];
        int loadedcentralities = 0;
        String stringcentralities = "";
        CyTable currentnodetable = currentnetwork.getDefaultNodeTable();
        CyTable currentnetworktable = currentnetwork.getDefaultNetworkTable();
        //CyTable currentedgetable = currentnetwork.getDefaultEdgeTable();
        // CyAttributes currentNetworkAttributes = Cytoscape.getNetworkAttributes();


        //loadedCentralities[0] = currentNetworkAttributes.hasAttribute(Cytoscape.getCurrentNetwork().getIdentifier(), "Diameter unDir");
        // loadedCentralities[1] = currentNetworkAttributes.hasAttribute(Cytoscape.getCurrentNetwork().getIdentifier(), "Average Distance");
        if (currentnetworktable.getColumn("Diameter unDir") != null) {
            loadedCentralities[0] = true;
        } else {
            loadedCentralities[0] = false;
        }
        //  currentNetworkAttributes.hasAttribute(Cytoscape.getCurrentNetwork().getIdentifier(), "Diameter unDir");
        if (currentnetworktable.getColumn("Average Distance unDir") != null) {
            loadedCentralities[1] = true;
        } else {
            loadedCentralities[1] = false;
        }

        //    loadedCentralities[1] = currentNetworkAttributes.hasAttribute(Cytoscape.getCurrentNetwork().getIdentifier(), "Average Distance");

        loadedCentralities[2] = isalreadyloaded("Degree unDir");
        loadedCentralities[3] = isalreadyloaded("Eccentricity unDir");
        loadedCentralities[4] = isalreadyloaded("Radiality unDir");
        loadedCentralities[5] = isalreadyloaded("Closeness unDir");
        loadedCentralities[6] = isalreadyloaded("Stress unDir");
        loadedCentralities[7] = isalreadyloaded("Betweenness unDir");
        loadedCentralities[8] = isalreadyloaded("Centroid unDir");
        loadedCentralities[9] = isalreadyloaded("EigenVector unDir");
        loadedCentralities[10] = isalreadyloaded("Bridging unDir");
        loadedCentralities[11] = isalreadyloaded("Edge Betweenness unDir");

        for (int i = 0; i < numberofcentralities; i++) {
            if (selectedCentralities[i] & loadedCentralities[i]) {
                loadedcentralities++;
                switch (i) {
                    case 0:
                        stringcentralities = stringcentralities + "Diameter, ";
                        break;
                    case 1:

                        stringcentralities = stringcentralities + "Average Distance, ";
                        break;
                    case 2:
                        stringcentralities = stringcentralities + "Degree, ";
                        break;
                    case 3:
                        stringcentralities = stringcentralities + "Eccentricity, ";
                        break;
                    case 4:
                        stringcentralities = stringcentralities + "Radiality, ";
                        break;
                    case 5:
                        stringcentralities = stringcentralities + "Closeness, ";
                        break;
                    case 6:
                        stringcentralities = stringcentralities + "Stress, ";
                        break;
                    case 7:
                        stringcentralities = stringcentralities + "Betwenness, ";
                        break;
                    case 8:
                        stringcentralities = stringcentralities + "Centroid value, ";
                        break;
                    case 9:
                        stringcentralities = stringcentralities + "EigenVector, ";
                        break;
                    case 10:
                        stringcentralities = stringcentralities + "Bridging, ";
                        break;
                    case 11:
                        stringcentralities = stringcentralities + "Edge Betwenness, ";
                        break;
                }
            }
        }

        if (loadedcentralities == 1) {
            stringcentralities = stringcentralities.substring(0, stringcentralities.length() - 2) + " is ";
        } else if (loadedcentralities > 1) {
            stringcentralities = stringcentralities.substring(0, stringcentralities.length() - 2);
            stringcentralities = stringcentralities.substring(0, stringcentralities.lastIndexOf(',')) + " and" + stringcentralities.substring(stringcentralities.lastIndexOf(',') + 1) + " are ";
        } else {
            stringcentralities = null;
        }
        return stringcentralities;

    }

    public boolean isalreadyloaded(String centralitystring) {

        Collection columnlist = currentnetwork.getDefaultNodeTable().getColumns();

        boolean result = false;
        String currentcentrality;

        for (Iterator i = columnlist.iterator(); i.hasNext();) {
            currentcentrality = ((CyColumn) i.next()).getName();
            if (centralitystring.equals(currentcentrality)) {
                result = true;
                return result;
            }
        }

        columnlist = currentnetwork.getDefaultEdgeTable().getColumns();
        for (Iterator i = columnlist.iterator(); i.hasNext();) {
            currentcentrality = ((CyColumn) i.next()).getName();
            if (centralitystring.equals(currentcentrality)) {
                result = true;
                return result;
            }
        }
        return result;
    }

    public void verifyselection() {
        if (DiameterCheckBox.isSelected()
                || AverageDistanceCheckBox.isSelected()
                || DegreeCheckBox.isSelected()
                || EccentricityCheckBox.isSelected()
                || RadialityCheckBox.isSelected()
                || ClosenessCheckBox.isSelected()
                || StressCheckBox.isSelected()
                || BetweennessCheckBox.isSelected()
                || CentroidCheckBox.isSelected()
                || EigenVectorCheckBox.isSelected()
                || BridgingCheckBox.isSelected()
                || EdgeBetweennessCheckBox.isSelected()) {

            StartButton.setEnabled(true);
        } else {
            StartButton.setEnabled(false);
        }
    }

    public Component getComponent() {
        return this;
    }

    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }

    public String getTitle() {
        return "CentiScaPe";
    }

    public Icon getIcon() {
        return null;
    }

    public void jTextPanelsetText(String set) {
        jLabelServerResponse.setText(set);
    }
}
